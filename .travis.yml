language: python

python:
  - "3.7"

services:
  - docker

deploy:
  provider: releases
  api_key: $GITHUB_TOKEN
  file: "main_flask"
  skip_cleanup: true
  on:
    tags: true

env:
  #scripts dir host and docker
  SCRIPTS_DIR: tests
  DOCKER_SCRIPTS_DIR: /home/dev/scripts

  #server on host
  SERVER: "localhost:8080"

  # unit tests env vars and flask app as cli (the last tests)
  TEMPLATES_DIR: inputs/templates
  VARS_DIR: inputs/variables

before_install:
  - docker build -t dinutac/estuary-discovery:latest .
  - docker run
    -d
    -p 8080:8080
    --name estuary-discovery
    dinutac/estuary-discovery:latest

install:
  - pip install -r requirements.txt

before_script:
  - py.test $SCRIPTS_DIR/render_test.py --cov=entities

script:
  - python3 -m unittest discover $SCRIPTS_DIR "*_test.py"
  #  - python -m unittest discover tests/rest "*_test.py"
  - docker exec estuary-discovery python3 -m unittest discover $DOCKER_SCRIPTS_DIR "render_test.py"
  - docker stop estuary-discovery
  - docker rm estuary-discovery

  #run eureka registration tests
  - docker-compose pull
  - docker build -t dinutac/estuary-discovery:latest .
  - docker-compose up -d
  - sleep 70
  - docker ps
  #  - generate 2 deployments and 1 test run. estuary deployer has curl installed
  - docker exec -ti estuary-discovery bash -c "curl -i http://estuary-deployer:8080/docker/deploystart/alpine.yml/variables.yml"
  - docker exec -ti estuary-discovery bash -c "curl -i http://estuary-deployer:8080/docker/deploystart/alpine.yml/variables.yml"
  - docker exec -ti estuary-discovery bash -c "
    curl -i
    --request POST 'http://estuary-testrunner:8080/teststart/100'
    --header 'Accept:application/json'
    --header 'Content-Type:text/plain'
    --data 'sleep 3600'"
  - docker exec -ti estuary-discovery bash -c "
    curl -i
    --request POST 'http://estuary-testrunner2:8080/teststart/200'
    --header 'Accept:application/json'
    --header 'Content-Type:text/plain'
    --data 'sleep 3600'"
  - sleep 20 #wait until deployments are up and running
  - docker ps
  - docker exec estuary-discovery python3 -m unittest discover $DOCKER_SCRIPTS_DIR/tests/rest_eureka "*_test.py"
  - docker-compose down -v

  #run self contained flask app tests
  - pyinstaller --onefile main_flask.py
  - ls -lrt dist
  - cp dist/main_flask .
  - chmod +x main_flask
  - sudo chown -R travis:travis inputs
  - ./main_flask > /dev/null 2>&1 &
  - ls -lrt
  - sleep 5
  #  - ./ngrok.sh
  #  - sleep 3600
  - python3 -m unittest discover $SCRIPTS_DIR/rest "*_test.py"
  - ls -lrt /tmp
  - ps -ef

  #run jinja2 render tests
  - docker run -i
    -v $TRAVIS_BUILD_DIR/inputs/templates:/data
    -v $TRAVIS_BUILD_DIR/inputs/variables:/variables  -e TEMPLATE=standalone.yml
    -e VARIABLES=variables.yml -e DATABASE=mysql56 -e IMAGE=latest
    --entrypoint python3 dinutac/estuary-discovery:latest $DOCKER_SCRIPTS_DIR/main.py

  - docker run --entrypoint jinja2
    -v $TRAVIS_BUILD_DIR/inputs/templates:/data
    -v $TRAVIS_BUILD_DIR/inputs/variables:/variables
    dinutac/estuary-discovery:latest
    /data/json.j2 /variables/json.json --format=json

after_success:
  - coveralls


