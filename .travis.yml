dist: xenial
language: python
python: 3.6
script: skip
os: linux

env:
  NGROK_TOKEN: 1RER6BUC3QNNwYWY5LcIBjrv3A8_24QccmopTEQJGMErG9uzw

jobs:
  include:
    - stage: test
    #run unit tests for render
    - language: python
      python: 3.6
      env:
        TEMPLATES_DIR: inputs/templates
        VARS_DIR: inputs/variables
        SCRIPTS_DIR: tests
        ISOLATED: true
      before_install:
        - pip3 install -r requirements.txt
        - pip3 install coveralls
      before_script:
        - py.test tests/render_test.py --cov=rest/api/jinja2
      script:
        - python3 -m unittest discover . "render_test.py"
      after_script:
        - coveralls

      #run self contained flask app
    - language: python
      python: 3.6
      env:
        TEMPLATES_DIR: inputs/templates
        VARS_DIR: inputs/variables
        SCRIPTS_DIR: tests
        ISOLATED: true
      before_install:
        - pip3 install -r requirements.txt
      before_script:
        - pyinstaller --onefile --clean --add-data="rest/api/templates/**:rest/api/templates/" main.py
        - ls -lrt dist
        - cp dist/main main-linux
        - chmod +x main-linux
        - sudo chown -R travis:travis inputs
        - ./main-linux &
        #        - ./main-linux > /dev/null 2>&1 &
        - ls -lrt
        - sleep 5
        #          - ./ngrok.sh
        #          - sleep 3600
        - ls -lrt /tmp
        - ps -ef
      script:
        - python3 -m unittest discover $SCRIPTS_DIR/rest "*_test.py"
        - python3 -m unittest discover tests/unit "*_test.py"

    #run executable tests - centos docker
    - language: python
      services: docker
      env:
        ISOLATED: true
        NGROK_TOKEN: 1RER6BUC3QNNwYWY5LcIBjrv3A8_24QccmopTEQJGMErG9uzw
        SKIP_ON_VM: true
        SKIP_ON_CENTOS: true
      before_script:
        - pip3 install -r requirements.txt
        - pyinstaller --onefile --clean --add-data="rest/api/templates/**:rest/api/templates/" main.py
        - ls -lrt dist
      script:
        - docker build -t estuaryoss/discovery:latest -f Dockerfile .
        - docker run
          -d
          -p 8080:8080
          --name estuary-discovery
          estuaryoss/discovery:latest
        - sleep 5
        - docker logs estuary-discovery
        #  - ./ngrok.sh
        #  - sleep 3600
        - python3 -m unittest discover tests/rest "*_test.py"

    #run eureka registration tests
    - language: python
      python: 3.6
      services: docker
      env:
        ISOLATED: true
        SCRIPTS_DIR: tests
      before_script:
        - docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_TOKEN"
        - docker-compose pull
        - pyinstaller --onefile --clean --add-data="rest/api/templates/**:rest/api/templates/" main.py
        - docker build -t estuaryoss/discovery:latest -f Dockerfile .
        - docker-compose up -d
        - docker pull alpine:3.9.4
      script:
        - sleep 70
        - docker ps
        #  - generate 2 deployments and 1 test run. estuary deployer has curl installed
        - docker exec -ti estuary-discovery bash -c "curl -i --request POST http://estuary-deployer:8080/docker/deployments/alpine.yml/variables.yml"
        - docker exec -ti estuary-discovery bash -c "curl -i --request POST http://estuary-deployer:8080/docker/deployments/alpine.yml/variables.yml"
        #        - docker exec -ti estuary-discovery bash -c "
        #          curl -i
        #          --request POST 'http://estuary-agent:8080/test/100'
        #          --header 'Accept:application/json'
        #          --header 'Content-Type:text/plain'
        #          --data 'sleep 3600'"
        #        - docker exec -ti estuary-discovery bash -c "
        #          curl -i
        #          --request POST 'http://estuary-agent2:8080/test/200'
        #          --header 'Accept:application/json'
        #          --header 'Content-Type:text/plain'
        #          --data 'sleep 3600'"
        - sleep 40 # wait until deployments are up and running
        - docker ps
        - python3 -m unittest discover tests/rest_eureka "*_test.py"

    #run fluentd EFK tests
    #    - language: python
    #      python: 3.6
    #      services: docker
    #      env:
    #        ISOLATED: true
    #        SCRIPTS_DIR: tests
    #      before_script:
    #        - docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_TOKEN"
    #        - docker-compose -f tests/fluentd_efk/docker-compose.yml pull
    #        - docker build -t estuaryoss/discovery:latest -f Dockerfile .
    #        - docker tag estuaryoss/discovery:latest estuaryoss/discovery:latest # <-- remove this when migrating
    #        #        - sudo sysctl -w vm.max_map_count=262144
    #        - docker-compose -f tests/fluentd_efk/docker-compose.yml up --build -d
    #        - sleep 120 #wait until efk stack is up and running
    #        - docker ps
    #      script:
    #        - curl -i http://localhost:8081/about #discovery
    #        - curl -i --header 'Token:invalidToken' http://localhost:8081/about #discovery unauth
    #        - curl -i http://localhost:8082/about #agent
    #        - curl -i --header 'Token:invalidToken' http://localhost:8082/about #agent unauth
    #        - curl -i --header 'Token:None' http://localhost:8083/about #agent-java
    #        - curl -i --header 'Token:invalidToken' http://localhost:8083/about #agent-java unauth
    #        - sleep 30
    #        - docker logs estuary-discovery
    #        - docker logs estuary-agent
    #        - docker logs estuary-agent-java
    #        - python3 -m unittest discover $SCRIPTS_DIR/fluentd_efk "*_test.py"

    - stage: deploy
      services: docker
      before_deploy:
        - pip3 install -r requirements.txt
        - pyinstaller --onefile --clean --add-data="rest/api/templates/**:rest/api/templates/" main.py
        - ls -lrt dist
        - cp dist/main main-linux
        - ls -lrt
        - rm -rf dist
        - rm -rf build
        - chmod +x *.sh
      deploy:
        - provider: script
          script: bash docker_push_tag.sh
          skip_cleanup: true
          on:
            tags: true

        - provider: script
          script: bash docker_push_master.sh
          skip_cleanup: true
          on:
            branch: master

        - provider: releases
          token: $GITHUB_TOKEN
          file:
            - "main-linux"
          skip_cleanup: true
          on:
            tags: true